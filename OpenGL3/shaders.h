//This file was automatically generated with a batch file with .glsl files as a source  
//Both the batch file and shader used can be found in the bin/Shaders folder of the projects working directory  
#pragma once  
const char * PolygonFrag = 
"#version 330 core\n" 
"\n" 
"#define PI 3.14159265359\n" 
"#define TWO_PI 6.28318530718\n" 
"\n" 
"in vec2 frag_uv;\n" 
"uniform vec4 Color;\n" 
"uniform vec4 bordColor;\n" 
"uniform vec2 shapeScale;\n" 
"uniform int sideCount;\n" 
"uniform float bordWidth;\n" 
"uniform float iTime;\n" 
"uniform sampler2D Text;\n" 
"out vec4 FragColor;\n" 
"void main()\n" 
"{\n" 
"float xblur = 1.5/shapeScale.x;\n" 
"float yblur = 1.5/shapeScale.y;\n" 
"\n" 
"vec4 FillColor = Color;\n" 
"vec4 BorderColor = bordColor;\n" 
"if(Color.w == -1.0){\n" 
"FillColor = vec4(0.5 + 0.5*cos(iTime * 1.4 +(frag_uv).xyx+vec3(0,2,4)), 1.0);\n" 
"}\n" 
"if(bordColor.w == -1.0){\n" 
"BorderColor = vec4(0.5 + 0.5*cos((iTime + 300.0) * 1.4 +(frag_uv).xyx+vec3(0,2,4)), 1.0);\n" 
"}\n" 
"\n" 
"if(sideCount == 4){\n" 
"float f =  smoothstep(1.0 - xblur, 1.0, frag_uv.x);\n" 
"f += smoothstep(xblur, 0.0, frag_uv.x);\n" 
"f +=  smoothstep(1.0 - yblur, 1.0, frag_uv.y);\n" 
"f += smoothstep(yblur, 0.0, frag_uv.y);\n" 
"\n" 
"vec4 c = vec4(FillColor.xyz, -f + FillColor.w);\n" 
"\n" 
"float bx = (bordWidth / shapeScale.x);\n" 
"float by = (bordWidth / shapeScale.y);\n" 
"if(bordWidth > 0){\n" 
"f =  smoothstep(1.0 - xblur - bx, 1.0 - bx, frag_uv.x);\n" 
"f += smoothstep(xblur+ bx, 0.0 + bx, frag_uv.x);\n" 
"f +=  smoothstep(1.0 - by - yblur, 1.0 - by, frag_uv.y);\n" 
"f += smoothstep(yblur + by, 0.0 + by, frag_uv.y);\n" 
"\n" 
"f = clamp(f, 0.0, 1.0);\n" 
"c = mix(c, BorderColor, f);\n" 
"}\n" 
"\n" 
"FragColor = vec4(c);\n" 
"return;\n" 
"}\n" 
"if(sideCount == 1){\n" 
"\n" 
"float f =  smoothstep(0.5 - xblur, 0.5, length(frag_uv  -0.5));\n" 
"vec4 c = vec4(FillColor.xyz, -f + FillColor.w);\n" 
"\n" 
"f =  smoothstep(0.5 - (bordWidth/shapeScale.x) - xblur, 0.5 - (bordWidth/shapeScale.x), length(frag_uv  -0.5));\n" 
"f -=  smoothstep(0.5 - xblur, 0.5, length(frag_uv  -0.5));\n" 
"c = mix(c, BorderColor, f);\n" 
"\n" 
"FragColor = c;\n" 
"return;\n" 
"}\n" 
"if(sideCount == 0){\n" 
"FragColor = vec4(texture(Text, frag_uv));\n" 
"return;\n" 
"}\n" 
"if(sideCount == -1){\n" 
"FragColor = vec4(FillColor.xyz, texture(Text, frag_uv).x - (1.0-FillColor.w));\n" 
"return;\n" 
"}\n" 
"\n" 
"vec2 uv = frag_uv - vec2(0.5,0.35);\n" 
"\n" 
"float a = atan(uv.x,uv.y)+PI;\n" 
"float r = TWO_PI/float(sideCount);\n" 
"float d = cos(floor(.5+a/r)*r-a)*length(uv);\n" 
"float xBlur = 2.5 / shapeScale.x;\n" 
"FragColor = vec4(FillColor.xyz,1.0 -smoothstep(0.289- xBlur, 0.289,d));\n" 
"}\n" 
; 
const char * RectVert = 
"#version 330 core\n" 
"layout (location = 0) in vec3 aPos;\n" 
"uniform mat4 xform;\n" 
"uniform float aspect;\n" 
"uniform vec2 scaleOffset;\n" 
"uniform vec2 posOffset;\n" 
"out vec2 frag_uv;\n" 
"void main()\n" 
"{\n" 
"vec4 ndcPos = xform * vec4(aPos.x / aspect, aPos.y, aPos.z, 1.0);\n" 
"frag_uv = aPos.xy*scaleOffset + posOffset;\n" 
"gl_Position = ndcPos;\n" 
"}\n" 
; 
const char * TextureFrag = 
"#version 330 core\n" 
"in vec2 frag_uv;\n" 
"uniform vec4 Color;\n" 
"uniform vec2 shapeScale;\n" 
"uniform sampler2D Text;\n" 
"out vec4 FragColor;\n" 
"void main()\n" 
"{\n" 
"//	float xblur = 2.5/shapeScale.x;\n" 
"//	float yblur = 2.5/shapeScale.y;\n" 
"\n" 
"//	float f =  smoothstep(1.0 - xblur, 1.0, frag_uv.x);\n" 
"//	f += smoothstep(xblur, 0.0, frag_uv.x);\n" 
"//	f +=  smoothstep(1.0 - yblur, 1.0, frag_uv.y);\n" 
"//	f += smoothstep(yblur, 0.0, frag_uv.y);\n" 
"\n" 
"FragColor = vec4(texture(Text, frag_uv));// -f + 1.0);\n" 
"};\n" 
"\n" 
"\n" 
"\n" 
; 
